{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","useEffect","a","axios","get","heatMapData","monthlyVariance","console","log","length","w","h","padding","minYear","d3","d","year","maxYear","temps","variance","map","minVar","maxVar","tempDifs","xScale","domain","range","yScale","month","colorScale","svg","append","attr","selectAll","enter","style","text","toFixed","xAxis","tickFormat","tickLabels","yAxisScale","yAxis","tickSizeOuter","i","call","legend","legendColors","push","legendTicks","legendScale","legendAxis","tickValues","className","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b33e66a9.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport * as d3 from 'd3';\nimport { color } from 'd3';\n\nfunction App() {\n\n  const [data, setData] = useState([])\n\n  useEffect(async () => {\n    try {\n      const heatMapData = await axios.get('https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/global-temperature.json')\n\n      setData(heatMapData.data.monthlyVariance)\n    } catch (error) {\n      console.log('error fetching data:\\n', error)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (data.length) {\n      const w = 1050;\n      const h = 650;\n      const padding = 60;\n      const minYear = d3.min(data, (d) => d.year);\n      const maxYear = d3.max(data, (d) => d.year);\n      const minTemp = d3.min(data, (d) => 8.66 + d.variance);\n      const maxTemp = d3.max(data, (d) => 8.66 + d.variance);\n      const temps = data.map((d) => d.variance);\n      const minVar = d3.min(data, (d) => d.variance);\n      const maxVar = d3.max(data, (d) => d.variance);\n      const tempDifs = (d3.max(temps) - d3.min(temps)) / 9;\n\n\n      console.log(data)\n      console.log('min', minVar)\n      console.log('max', maxVar)\n      console.log(tempDifs)\n\n      const xScale = d3.scaleLinear()\n        .domain([minYear, maxYear])\n        .range([padding, w - padding]);\n\n\n      const yScale = d3.scaleLinear()\n        .domain([d3.min(data, (d) => d.month) - 1, d3.max(data, (d) => d.month)])\n        .range([h - padding, padding]);\n\n      const colors = ['#00008b', '#5e5ece', '#58ccf3', '#94f3b8ee', '#f5f5b8', '#f8cf60', '#ffa500', '#f33d3dc5', '#8b0000'];\n\n      // const colors = ['#8b0000', '#f33d3dc5', '#ffa500', '#f8cf60', '#f5f5b8', '#94f3b8ee', '#58ccf3', '#5e5ece', '#00008b'];\n      const colorScale = d3.scaleQuantize()\n        .domain([d3.min(data, (d) => d.variance), d3.max(data, (d) => d.variance)])\n        .range(colors);\n\n\n\n      const svg = d3.select('#chart')\n        .append(\"svg\")\n        .attr(\"width\", w)\n        .attr(\"height\", h);\n\n      svg.selectAll(\"rect\")\n        .data(data)\n        .enter()\n        .append(\"rect\")\n        .attr(\"x\", (d) => xScale(d.year))\n        .attr(\"y\", (d) => yScale(d.month))\n        .attr(\"width\", (d) => (w - padding) / (maxYear - minYear))\n        .attr(\"height\", (h - padding) / 13)\n        .attr('class', 'cell')\n        .attr('data-month', (d) => d.month)\n        .attr('data-year', (d) => d.year)\n        .attr('data-temp', (d) => 8.66 + d.variance)\n        .style('fill', (d) => colorScale(d.variance))\n        .append(\"title\")\n        .attr('id', 'tooltip')\n        .attr('data-year', (d) => d.year)\n        .text((d) => `${d.year}\\nTemp: ${(8.66 + d.variance).toFixed(2)}℃\\n`)\n\n\n      const xAxis = d3.axisBottom(xScale)\n        .tickFormat(d3.format('d'))\n\n\n      const tickLabels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\n      const yAxisScale = d3.scaleLinear()\n        .domain([.5, 12.5])\n        .range([h - padding, padding]);\n\n      const yAxis = d3.axisLeft(yAxisScale)\n        .tickSizeOuter(0)\n        .tickFormat((d, i) => tickLabels[i])\n\n\n      svg.append(\"g\")\n        .attr('id', 'x-axis')\n        .attr(\"transform\", \"translate(0,\" + (h - padding) + \")\")\n        .call(xAxis);\n\n      svg.append(\"g\")\n        .attr('id', 'y-axis')\n        .attr(\"transform\", \"translate(\" + padding + \",0)\")\n        .call(yAxis);\n\n      svg.append('text')\n        .attr('id', 'title')\n        .attr('x', padding)\n        .attr('y', (h - h) + 45)\n        .text('Global Land-Surface Temp 1753-2015')\n        .style('font-size', '30px')\n\n      svg.append('text')\n        .attr('id', 'description')\n        .attr('x', w - (w / 4))\n        .attr('y', (h - h) + 45)\n        .text('Base temperature: 8.66℃')\n\n      const legend = svg.append('g')\n        .attr('id', 'legend')\n\n      const legendColors = [];\n      for (let i = 0; i < 9; i++) {\n        legendColors.push(d3.min(temps) + ((tempDifs * i) + (tempDifs / 2)));\n      };\n\n      legend.selectAll('rect')\n        .data(legendColors)\n        .enter()\n        .append('rect')\n        .attr('x', (d, i) => padding + (30 * i))\n        .attr('y', (h - padding) + 30)\n        .attr('val', d => d)\n        .attr('class', 'legend-cell')\n        .attr('width', 30)\n        .attr('height', 10)\n        .style('fill', d => colorScale(d));\n\n\n      const legendTicks = [];\n      for (let i = 0; i < 10; i++) {\n        legendTicks.push(d3.min(temps) + (tempDifs * i))\n      };\n      console.log(legendTicks)\n\n      const legendScale = d3.scaleLinear()\n        .domain([legendTicks[0], legendTicks[legendTicks.length - 1]])\n        .range([padding, padding + (30 * 9)])\n\n      const legendAxis = d3.axisBottom(legendScale)\n        .tickValues(legendTicks)\n        .tickFormat(d3.format('.1f'))\n\n\n      legend.append('g')\n        .attr('id', 'legend-axis')\n        .attr(\"transform\", `translate(0, ${h - 20})`)\n        .call(legendAxis);\n\n      legend.append('text')\n        .attr('id', 'legend')\n        .attr('x', 350)\n        .attr('y', (h - padding) + 43)\n        .text('Variance From Base Temp')\n\n\n\n\n\n\n\n\n\n    }\n  }, [data])\n\n\n  return (\n    <div className=\"App\">\n\n      <div id=\"chart\"></div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}